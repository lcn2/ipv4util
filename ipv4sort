#!/usr/bin/env perl
#
# ipv4sort - extract IPv4 addresses from files in sorted order
#
# This utility will extract IP addresses from files (or STDIN if no args).
# print them, in order, to STDOUT
#
# Copyright (c) 2000-2002,2004,2006,2023,2025 by Landon Curt Noll.  All Rights Reserved.
#
# Permission to use, copy, modify, and distribute this software and
# its documentation for any purpose and without fee is hereby granted,
# provided that the above copyright, this permission notice and text
# this comment, and the disclaimer below appear in all of the following:
#
#       supporting documentation
#       source copies
#       source works derived from this source
#       binaries derived from this source or from derived source
#
# LANDON CURT NOLL DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
# INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO
# EVENT SHALL LANDON CURT NOLL BE LIABLE FOR ANY SPECIAL, INDIRECT OR
# CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF
# USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
# OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
# PERFORMANCE OF THIS SOFTWARE.
#
# chongo (Landon Curt Noll) /\oo/\
#
# http://www.isthe.com/chongo/index.html
# https://github.com/lcn2
#
# Share and enjoy!  :-)


# requirements
#
use strict;
use bytes;
use vars qw($opt_h $opt_V $opt_d $opt_e $opt_u $opt_w);
use Getopt::Long qw(:config no_ignore_case);
use File::Basename;

# version
#
my $VERSION = "1.6.1 2025-03-28";

# my vars
#
my $NAME = basename($0);

# ip address pattern
#
my $ip_exp = "[0-9]{1,3}[.][0-9]{1,3}[.][0-9]{1,3}[.][0-9]{1,3}";

# usage and help
#
my $usage = "$NAME [-h] [-V] [-d] [-e] [-w] [-u] [file ...]";
my $help = qq{$usage

    -h              print help and exit
    -V              print version and exit

    -d		    misc debugging
    -e		    just extract IP addresses and sort them (no -w)
    -w		    keep the whole line, sort on 1st IP address (default unless -e)
    -u		    keep only unique lines

    [file ...]	    process data in file(s) (def: read stdin)

$NAME version: $VERSION};
my %optctl = (
    "h" => \$opt_h,
    "V" => \$opt_V,
    "d" => \$opt_d,
    "e" => \$opt_e,
    "u" => \$opt_u,
    "w" => \$opt_w,
);

# function prototypes
#
sub error($@);

# Main function
#
MAIN:
{
    my @ip_set;		# ip addresses found
    my $line;		# current line being parsed
    my $lineno;		# current line number

    # set the defaults
    #
    $opt_h = 0;
    $opt_V = 0;
    $opt_d = 0;
    $opt_e = 0;
    $opt_u = 0;
    $opt_w = 1;	# -w is default

    # parse args
    #
    if (!GetOptions(%optctl)) {
        error(1, "invalid command line\nusage: $help");
    }
    if ($opt_h) {
        print "$help\n";
        exit(0);
    }
    if ($opt_V) {
        print "$VERSION\n";
        exit(0);
    }
    if ($opt_e) {
	$opt_w = 0;	# -e implies no -w
    }
    if ($#ARGV < 0) {
        error(2, "missing required argument\nusage: $help");
    }

    # extract IP address from STDIN
    #
    if ($opt_w) {

	# -w whole line keep/sorting
	#
	$lineno = 0;
	while (defined($line = <>)) {

	    # We will prepend 1st IP address on each line.  For lines
	    # without an IP address, we will prepend 0.0.0.lineno.
	    # We will remove these IP addresses before we output.
	    #
	    chomp $line;
	    ++$lineno;
	    if ($line =~ /($ip_exp)/o) {
		# push with a leading IP address
		push (@ip_set, "$1 #$line");
	    } else {
		# no IP in line, push with a leading IP address of 0.0.0.lineno
		push (@ip_set, "0.0.0.$lineno #$line");
	    }
	}

    } else {

	# without -w, sort on each IP address found ignoring NON-ip addresses
	#
	undef $/;
	while (<>) {
	    my @raw_data = grep { $_ =~ /^$ip_exp$/o } split(/[^0-9.]+/, $_);
	    push(@ip_set, @raw_data), "\n" if ($#raw_data >= 0);
	}
    }

    # do nothing if no addresses found
    #
    exit(0) unless @ip_set;

    # remove non-unique if -u was given
    #
    if ($opt_u) {

	my %seen = {};	# IP addrs that we have seen

	@ip_set = grep { ! $seen{$_}++ } @ip_set;
    }

    # sort extract IP address
    #
    @ip_set = map { $_->[0] }
	      sort {
		($a->[1] <=> $b->[1]) ||
		($a->[2] <=> $b->[2]) ||
		($a->[3] <=> $b->[3]) ||
		($a->[4] <=> $b->[4]) ||
		($a->[0] cmp $b->[0])
	      }
	      map { [ $_, split /\./ ] } @ip_set;

    # if -w, remove the prepended IP addresses from each line
    #
    if ($opt_w && !$opt_d) {
	map { s/^[^#]*#// } @ip_set;
    }

    # print the resules
    #
    print join("\n", @ip_set), "\n";
}


# error - report an error and exit
#
# given:
#       $exitval        exit code value
#       $msg ...        error debug message to print
#
sub error($@)
{
    my ($exitval) = shift @_;   # get args
    my $msg;                    # error message to print

    # parse args
    #
    if (!defined $exitval) {
        $exitval = 254;
    }
    if ($#_ < 0) {
        $msg = "<<< no message supplied >>>";
    } else {
        $msg = join(' ', @_);
    }
    if ($exitval =~ /\D/) {
        $msg .= "<<< non-numeric exit code: $exitval >>>";
        $exitval = 253;
    }

    # issue the error message
    #
    print STDERR "$0: $msg\n";

    # issue an error message
    #
    exit($exitval);
}
